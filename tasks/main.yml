---

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags:
    - vars
    - install
    - config
    - service

- name: Install required dependencies
  package:
    name: "{{ item }}"
    state: present
  become: true
  with_items:
    - "{{ packages_dependencies }}"
  tags:
    - install

- name: Install required packages
  package:
    name: "{{ item }}"
    state: present
  become: true
  with_items:
    - "{{ packages_to_install }}"
  tags:
    - install

- name: check to see if jail.local exists
  stat:
    path: "{{ fail2ban_jail_config }}"
  register: jail_config
  tags:
    - copy

- name: set up fail2ban files and dir
  file:
    path: "{{ item.path }}"
    state: "{{ item.state }}"
    mode: "{{ item.mode }}"
  with_items:
    - "{{ fail2ban_files_dirs }}"
  tags:
    - config

- name: only touch files if they don't exist
  stat:
    path: "{{ item.path }}"
  register: files_to_touch
  with_items:
    - "{{ fail2ban_files_to_touch }}"

- debug: var=files_to_touch

- name: touch any required fail2ban files
  file:
    path: "{{ item.item.path }}"
    mode: "{{ item.item.mode }}"
    state: touch
  with_items:
    - "{{ files_to_touch.results }}"
  when:
    - not item.stat.exists
  tags:
    - config

- name: copy jail.conf to jail.local
  copy:
    src: "{{ fail2ban_example_jail_config }}"
    dest: "{{ fail2ban_jail_config }}"
    remote_src: true
  when:
    - not jail_config.stat.exists
  tags:
    - config

- name: configure fail2ban jail
  ini_file:
    dest: "{{ item.0.file }}"
    section: "{{ item.0.section }}"
    option: "{{ item.1.option }}"
    value: "{{ item.1.value }}"
    backup: true
  with_subelements:
    - "{{ fail2ban_jail_local }}"
    - options
  notify:
    - start and enable fail2ban services
  tags:
    - config
